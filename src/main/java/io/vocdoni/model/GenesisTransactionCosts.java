/*
 * Vocdoni API
 * The Vocdoni API is a REST API that substitutes the previous RPCs in order to make it easier for  developers/integrators to build on top of the voting protocol. This API facilitates creating votings using Vocdoni, without the hassle of learning a complex blockchain platform, allowing to perform all the features that enable the voting protocol such as creating an account, entity, voting process, census & vote, abstracting as much as possible the complexity and offering simple and straightforward methods to perform those actions.   You can review the API endpoints documentation in this section, the main entities are:  - [**Chain**](chain): The Vocdoni blockchain is named Vochain. It is a Byzantine fault-tolerant network based on Tendermint that executes the Vocdoni Protocol logic represented as a state machine. Its main purpose is to register votes in a  decentralized and verifiable format. In those endpoints, you can consult the state of the chain, transactions costs,  list organizations and get more Vochain info. - [**Accounts**](accounts): Identified by an Ethereum like address. An account can create and manage elections, transfer tokens, give power to other accounts on his behalf (delegates) and manage its metadata. - [**Elections**](elections): Is a rule-set of options and requirements for creating a process in which people vote a series of options. To know more about the params of an election and its lifecycle go [here](../get-started/intro#23-elections). In this section you will find all information related to an election as its information, election keys, submitted votes & how to create a new election. - [**Censuses**](censuses): The census is a key component of any voting process. It specifies the set of users (identified by a public key or address) eligible for participating in an election. To understand more about the Censuses you can check [here](../get-started/intro#21-the-census). Here you will be able to get censuses information like the Merkle root, total weight & size, import/export the censuses and create new ones. - [**Votes**](votes): All the information related to the vote issued by a participant in a vote, you can check the validity of the vote, consult your information and send a vote. - [**SIK**](sik): The Secret Identity Key is a user-generated piece of information that proves the user's identity without revealing it. It is the hash of the user's address, the signature of a public message and an optional secret part. It is used to ensure anonymous voting. All registered accounts or anonymous voters must register a SIK, and they are all stored in a Merkle tree. The `/siks` endpoints help to generate a proof of membership, get the current valid SIK roots, or check if an account has a valid SIK.   ### Errors   Backend error messages list are defined here: https://github.com/vocdoni/vocdoni-node/blob/master/api/errors.go  About the **204 no content** error: this message will be returned only if the asset being queried cannot be found but no other errors have occurred. This response is commonly used to prevent Javascript errors that may arise when a client is waiting for a  transaction to be published. During this waiting period, the client can repeatedly query the endpoint until a  successful response with a status code of 200 is received, thereby avoiding any errors that may occur due to the transaction not being published yet.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vocdoni.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.vocdoni.invoker.JSON;

/**
 * GenesisTransactionCosts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-08T21:49:26.053235+01:00[Europe/Prague]")
public class GenesisTransactionCosts {
  public static final String SERIALIZED_NAME_TX_ADD_DELEGATE_FOR_ACCOUNT = "Tx_AddDelegateForAccount";
  @SerializedName(SERIALIZED_NAME_TX_ADD_DELEGATE_FOR_ACCOUNT)
  private Integer txAddDelegateForAccount;

  public static final String SERIALIZED_NAME_TX_COLLECT_FAUCET = "Tx_CollectFaucet";
  @SerializedName(SERIALIZED_NAME_TX_COLLECT_FAUCET)
  private Integer txCollectFaucet;

  public static final String SERIALIZED_NAME_TX_CREATE_ACCOUNT = "Tx_CreateAccount";
  @SerializedName(SERIALIZED_NAME_TX_CREATE_ACCOUNT)
  private Integer txCreateAccount;

  public static final String SERIALIZED_NAME_TX_DEL_DELEGATE_FOR_ACCOUNT = "Tx_DelDelegateForAccount";
  @SerializedName(SERIALIZED_NAME_TX_DEL_DELEGATE_FOR_ACCOUNT)
  private Integer txDelDelegateForAccount;

  public static final String SERIALIZED_NAME_TX_DEL_SIK = "Tx_DelSik";
  @SerializedName(SERIALIZED_NAME_TX_DEL_SIK)
  private Integer txDelSik;

  public static final String SERIALIZED_NAME_TX_NEW_PROCESS = "Tx_NewProcess";
  @SerializedName(SERIALIZED_NAME_TX_NEW_PROCESS)
  private Integer txNewProcess;

  public static final String SERIALIZED_NAME_TX_REGISTER_KEY = "Tx_RegisterKey";
  @SerializedName(SERIALIZED_NAME_TX_REGISTER_KEY)
  private Integer txRegisterKey;

  public static final String SERIALIZED_NAME_TX_SEND_TOKENS = "Tx_SendTokens";
  @SerializedName(SERIALIZED_NAME_TX_SEND_TOKENS)
  private Integer txSendTokens;

  public static final String SERIALIZED_NAME_TX_SET_ACCOUNT_INFO_U_R_I = "Tx_SetAccountInfoURI";
  @SerializedName(SERIALIZED_NAME_TX_SET_ACCOUNT_INFO_U_R_I)
  private Integer txSetAccountInfoURI;

  public static final String SERIALIZED_NAME_TX_SET_PROCESS_CENSUS = "Tx_SetProcessCensus";
  @SerializedName(SERIALIZED_NAME_TX_SET_PROCESS_CENSUS)
  private Integer txSetProcessCensus;

  public static final String SERIALIZED_NAME_TX_SET_PROCESS_QUESTION_INDEX = "Tx_SetProcessQuestionIndex";
  @SerializedName(SERIALIZED_NAME_TX_SET_PROCESS_QUESTION_INDEX)
  private Integer txSetProcessQuestionIndex;

  public static final String SERIALIZED_NAME_TX_SET_PROCESS_STATUS = "Tx_SetProcessStatus";
  @SerializedName(SERIALIZED_NAME_TX_SET_PROCESS_STATUS)
  private Integer txSetProcessStatus;

  public static final String SERIALIZED_NAME_TX_SET_SIK = "Tx_SetSik";
  @SerializedName(SERIALIZED_NAME_TX_SET_SIK)
  private Integer txSetSik;

  public GenesisTransactionCosts() {
  }

  public GenesisTransactionCosts txAddDelegateForAccount(Integer txAddDelegateForAccount) {
    
    this.txAddDelegateForAccount = txAddDelegateForAccount;
    return this;
  }

   /**
   * Get txAddDelegateForAccount
   * @return txAddDelegateForAccount
  **/
  @javax.annotation.Nullable
  public Integer getTxAddDelegateForAccount() {
    return txAddDelegateForAccount;
  }


  public void setTxAddDelegateForAccount(Integer txAddDelegateForAccount) {
    this.txAddDelegateForAccount = txAddDelegateForAccount;
  }


  public GenesisTransactionCosts txCollectFaucet(Integer txCollectFaucet) {
    
    this.txCollectFaucet = txCollectFaucet;
    return this;
  }

   /**
   * Get txCollectFaucet
   * @return txCollectFaucet
  **/
  @javax.annotation.Nullable
  public Integer getTxCollectFaucet() {
    return txCollectFaucet;
  }


  public void setTxCollectFaucet(Integer txCollectFaucet) {
    this.txCollectFaucet = txCollectFaucet;
  }


  public GenesisTransactionCosts txCreateAccount(Integer txCreateAccount) {
    
    this.txCreateAccount = txCreateAccount;
    return this;
  }

   /**
   * Get txCreateAccount
   * @return txCreateAccount
  **/
  @javax.annotation.Nullable
  public Integer getTxCreateAccount() {
    return txCreateAccount;
  }


  public void setTxCreateAccount(Integer txCreateAccount) {
    this.txCreateAccount = txCreateAccount;
  }


  public GenesisTransactionCosts txDelDelegateForAccount(Integer txDelDelegateForAccount) {
    
    this.txDelDelegateForAccount = txDelDelegateForAccount;
    return this;
  }

   /**
   * Get txDelDelegateForAccount
   * @return txDelDelegateForAccount
  **/
  @javax.annotation.Nullable
  public Integer getTxDelDelegateForAccount() {
    return txDelDelegateForAccount;
  }


  public void setTxDelDelegateForAccount(Integer txDelDelegateForAccount) {
    this.txDelDelegateForAccount = txDelDelegateForAccount;
  }


  public GenesisTransactionCosts txDelSik(Integer txDelSik) {
    
    this.txDelSik = txDelSik;
    return this;
  }

   /**
   * Get txDelSik
   * @return txDelSik
  **/
  @javax.annotation.Nullable
  public Integer getTxDelSik() {
    return txDelSik;
  }


  public void setTxDelSik(Integer txDelSik) {
    this.txDelSik = txDelSik;
  }


  public GenesisTransactionCosts txNewProcess(Integer txNewProcess) {
    
    this.txNewProcess = txNewProcess;
    return this;
  }

   /**
   * Get txNewProcess
   * @return txNewProcess
  **/
  @javax.annotation.Nullable
  public Integer getTxNewProcess() {
    return txNewProcess;
  }


  public void setTxNewProcess(Integer txNewProcess) {
    this.txNewProcess = txNewProcess;
  }


  public GenesisTransactionCosts txRegisterKey(Integer txRegisterKey) {
    
    this.txRegisterKey = txRegisterKey;
    return this;
  }

   /**
   * Get txRegisterKey
   * @return txRegisterKey
  **/
  @javax.annotation.Nullable
  public Integer getTxRegisterKey() {
    return txRegisterKey;
  }


  public void setTxRegisterKey(Integer txRegisterKey) {
    this.txRegisterKey = txRegisterKey;
  }


  public GenesisTransactionCosts txSendTokens(Integer txSendTokens) {
    
    this.txSendTokens = txSendTokens;
    return this;
  }

   /**
   * Get txSendTokens
   * @return txSendTokens
  **/
  @javax.annotation.Nullable
  public Integer getTxSendTokens() {
    return txSendTokens;
  }


  public void setTxSendTokens(Integer txSendTokens) {
    this.txSendTokens = txSendTokens;
  }


  public GenesisTransactionCosts txSetAccountInfoURI(Integer txSetAccountInfoURI) {
    
    this.txSetAccountInfoURI = txSetAccountInfoURI;
    return this;
  }

   /**
   * Get txSetAccountInfoURI
   * @return txSetAccountInfoURI
  **/
  @javax.annotation.Nullable
  public Integer getTxSetAccountInfoURI() {
    return txSetAccountInfoURI;
  }


  public void setTxSetAccountInfoURI(Integer txSetAccountInfoURI) {
    this.txSetAccountInfoURI = txSetAccountInfoURI;
  }


  public GenesisTransactionCosts txSetProcessCensus(Integer txSetProcessCensus) {
    
    this.txSetProcessCensus = txSetProcessCensus;
    return this;
  }

   /**
   * Get txSetProcessCensus
   * @return txSetProcessCensus
  **/
  @javax.annotation.Nullable
  public Integer getTxSetProcessCensus() {
    return txSetProcessCensus;
  }


  public void setTxSetProcessCensus(Integer txSetProcessCensus) {
    this.txSetProcessCensus = txSetProcessCensus;
  }


  public GenesisTransactionCosts txSetProcessQuestionIndex(Integer txSetProcessQuestionIndex) {
    
    this.txSetProcessQuestionIndex = txSetProcessQuestionIndex;
    return this;
  }

   /**
   * Get txSetProcessQuestionIndex
   * @return txSetProcessQuestionIndex
  **/
  @javax.annotation.Nullable
  public Integer getTxSetProcessQuestionIndex() {
    return txSetProcessQuestionIndex;
  }


  public void setTxSetProcessQuestionIndex(Integer txSetProcessQuestionIndex) {
    this.txSetProcessQuestionIndex = txSetProcessQuestionIndex;
  }


  public GenesisTransactionCosts txSetProcessStatus(Integer txSetProcessStatus) {
    
    this.txSetProcessStatus = txSetProcessStatus;
    return this;
  }

   /**
   * Get txSetProcessStatus
   * @return txSetProcessStatus
  **/
  @javax.annotation.Nullable
  public Integer getTxSetProcessStatus() {
    return txSetProcessStatus;
  }


  public void setTxSetProcessStatus(Integer txSetProcessStatus) {
    this.txSetProcessStatus = txSetProcessStatus;
  }


  public GenesisTransactionCosts txSetSik(Integer txSetSik) {
    
    this.txSetSik = txSetSik;
    return this;
  }

   /**
   * Get txSetSik
   * @return txSetSik
  **/
  @javax.annotation.Nullable
  public Integer getTxSetSik() {
    return txSetSik;
  }


  public void setTxSetSik(Integer txSetSik) {
    this.txSetSik = txSetSik;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenesisTransactionCosts genesisTransactionCosts = (GenesisTransactionCosts) o;
    return Objects.equals(this.txAddDelegateForAccount, genesisTransactionCosts.txAddDelegateForAccount) &&
        Objects.equals(this.txCollectFaucet, genesisTransactionCosts.txCollectFaucet) &&
        Objects.equals(this.txCreateAccount, genesisTransactionCosts.txCreateAccount) &&
        Objects.equals(this.txDelDelegateForAccount, genesisTransactionCosts.txDelDelegateForAccount) &&
        Objects.equals(this.txDelSik, genesisTransactionCosts.txDelSik) &&
        Objects.equals(this.txNewProcess, genesisTransactionCosts.txNewProcess) &&
        Objects.equals(this.txRegisterKey, genesisTransactionCosts.txRegisterKey) &&
        Objects.equals(this.txSendTokens, genesisTransactionCosts.txSendTokens) &&
        Objects.equals(this.txSetAccountInfoURI, genesisTransactionCosts.txSetAccountInfoURI) &&
        Objects.equals(this.txSetProcessCensus, genesisTransactionCosts.txSetProcessCensus) &&
        Objects.equals(this.txSetProcessQuestionIndex, genesisTransactionCosts.txSetProcessQuestionIndex) &&
        Objects.equals(this.txSetProcessStatus, genesisTransactionCosts.txSetProcessStatus) &&
        Objects.equals(this.txSetSik, genesisTransactionCosts.txSetSik);
  }

  @Override
  public int hashCode() {
    return Objects.hash(txAddDelegateForAccount, txCollectFaucet, txCreateAccount, txDelDelegateForAccount, txDelSik, txNewProcess, txRegisterKey, txSendTokens, txSetAccountInfoURI, txSetProcessCensus, txSetProcessQuestionIndex, txSetProcessStatus, txSetSik);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenesisTransactionCosts {\n");
    sb.append("    txAddDelegateForAccount: ").append(toIndentedString(txAddDelegateForAccount)).append("\n");
    sb.append("    txCollectFaucet: ").append(toIndentedString(txCollectFaucet)).append("\n");
    sb.append("    txCreateAccount: ").append(toIndentedString(txCreateAccount)).append("\n");
    sb.append("    txDelDelegateForAccount: ").append(toIndentedString(txDelDelegateForAccount)).append("\n");
    sb.append("    txDelSik: ").append(toIndentedString(txDelSik)).append("\n");
    sb.append("    txNewProcess: ").append(toIndentedString(txNewProcess)).append("\n");
    sb.append("    txRegisterKey: ").append(toIndentedString(txRegisterKey)).append("\n");
    sb.append("    txSendTokens: ").append(toIndentedString(txSendTokens)).append("\n");
    sb.append("    txSetAccountInfoURI: ").append(toIndentedString(txSetAccountInfoURI)).append("\n");
    sb.append("    txSetProcessCensus: ").append(toIndentedString(txSetProcessCensus)).append("\n");
    sb.append("    txSetProcessQuestionIndex: ").append(toIndentedString(txSetProcessQuestionIndex)).append("\n");
    sb.append("    txSetProcessStatus: ").append(toIndentedString(txSetProcessStatus)).append("\n");
    sb.append("    txSetSik: ").append(toIndentedString(txSetSik)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Tx_AddDelegateForAccount");
    openapiFields.add("Tx_CollectFaucet");
    openapiFields.add("Tx_CreateAccount");
    openapiFields.add("Tx_DelDelegateForAccount");
    openapiFields.add("Tx_DelSik");
    openapiFields.add("Tx_NewProcess");
    openapiFields.add("Tx_RegisterKey");
    openapiFields.add("Tx_SendTokens");
    openapiFields.add("Tx_SetAccountInfoURI");
    openapiFields.add("Tx_SetProcessCensus");
    openapiFields.add("Tx_SetProcessQuestionIndex");
    openapiFields.add("Tx_SetProcessStatus");
    openapiFields.add("Tx_SetSik");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GenesisTransactionCosts
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenesisTransactionCosts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenesisTransactionCosts is not found in the empty JSON string", GenesisTransactionCosts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenesisTransactionCosts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenesisTransactionCosts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenesisTransactionCosts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenesisTransactionCosts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenesisTransactionCosts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenesisTransactionCosts.class));

       return (TypeAdapter<T>) new TypeAdapter<GenesisTransactionCosts>() {
           @Override
           public void write(JsonWriter out, GenesisTransactionCosts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenesisTransactionCosts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenesisTransactionCosts given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenesisTransactionCosts
  * @throws IOException if the JSON string is invalid with respect to GenesisTransactionCosts
  */
  public static GenesisTransactionCosts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenesisTransactionCosts.class);
  }

 /**
  * Convert an instance of GenesisTransactionCosts to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

