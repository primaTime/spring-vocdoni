/*
 * Vocdoni API
 * The Vocdoni API is a REST API that substitutes the previous RPCs in order to make it easier for  developers/integrators to build on top of the voting protocol. This API facilitates creating votings using Vocdoni, without the hassle of learning a complex blockchain platform, allowing to perform all the features that enable the voting protocol such as creating an account, entity, voting process, census & vote, abstracting as much as possible the complexity and offering simple and straightforward methods to perform those actions.   You can review the API endpoints documentation in this section, the main entities are:  - [**Chain**](chain): The Vocdoni blockchain is named Vochain. It is a Byzantine fault-tolerant network based on Tendermint that executes the Vocdoni Protocol logic represented as a state machine. Its main purpose is to register votes in a  decentralized and verifiable format. In those endpoints, you can consult the state of the chain, transactions costs,  list organizations and get more Vochain info. - [**Accounts**](accounts): Identified by an Ethereum like address. An account can create and manage elections, transfer tokens, give power to other accounts on his behalf (delegates) and manage its metadata. - [**Elections**](elections): Is a rule-set of options and requirements for creating a process in which people vote a series of options. To know more about the params of an election and its lifecycle go [here](../get-started/intro#23-elections). In this section you will find all information related to an election as its information, election keys, submitted votes & how to create a new election. - [**Censuses**](censuses): The census is a key component of any voting process. It specifies the set of users (identified by a public key or address) eligible for participating in an election. To understand more about the Censuses you can check [here](../get-started/intro#21-the-census). Here you will be able to get censuses information like the Merkle root, total weight & size, import/export the censuses and create new ones. - [**Votes**](votes): All the information related to the vote issued by a participant in a vote, you can check the validity of the vote, consult your information and send a vote. - [**SIK**](sik): The Secret Identity Key is a user-generated piece of information that proves the user's identity without revealing it. It is the hash of the user's address, the signature of a public message and an optional secret part. It is used to ensure anonymous voting. All registered accounts or anonymous voters must register a SIK, and they are all stored in a Merkle tree. The `/siks` endpoints help to generate a proof of membership, get the current valid SIK roots, or check if an account has a valid SIK.   ### Errors   Backend error messages list are defined here: https://github.com/vocdoni/vocdoni-node/blob/master/api/errors.go  About the **204 no content** error: this message will be returned only if the asset being queried cannot be found but no other errors have occurred. This response is commonly used to prevent Javascript errors that may arise when a client is waiting for a  transaction to be published. During this waiting period, the client can repeatedly query the endpoint until a  successful response with a status code of 200 is received, thereby avoiding any errors that may occur due to the transaction not being published yet.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vocdoni.api;

import io.vocdoni.invoker.ApiCallback;
import io.vocdoni.invoker.ApiClient;
import io.vocdoni.invoker.ApiException;
import io.vocdoni.invoker.ApiResponse;
import io.vocdoni.invoker.Configuration;
import io.vocdoni.invoker.Pair;
import io.vocdoni.invoker.ProgressRequestBody;
import io.vocdoni.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.vocdoni.model.ApiVote;
import io.vocdoni.model.ApirestAPIerror;
import io.vocdoni.model.VotesPost200Response;
import io.vocdoni.model.VotesPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VotesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VotesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for votesPost
     * @param votesPostRequest Requires a protobuf signed transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesPostCall(VotesPostRequest votesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = votesPostRequest;

        // create path and map variables
        String localVarPath = "/votes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call votesPostValidateBeforeCall(VotesPostRequest votesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'votesPostRequest' is set
        if (votesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'votesPostRequest' when calling votesPost(Async)");
        }

        return votesPostCall(votesPostRequest, _callback);

    }

    /**
     * Submit a vote
     * Submit a vote using a protobuf signed transaction. The corresponding result are the vote id and transaction hash where the vote is registered.
     * @param votesPostRequest Requires a protobuf signed transaction (required)
     * @return VotesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VotesPost200Response votesPost(VotesPostRequest votesPostRequest) throws ApiException {
        ApiResponse<VotesPost200Response> localVarResp = votesPostWithHttpInfo(votesPostRequest);
        return localVarResp.getData();
    }

    /**
     * Submit a vote
     * Submit a vote using a protobuf signed transaction. The corresponding result are the vote id and transaction hash where the vote is registered.
     * @param votesPostRequest Requires a protobuf signed transaction (required)
     * @return ApiResponse&lt;VotesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VotesPost200Response> votesPostWithHttpInfo(VotesPostRequest votesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = votesPostValidateBeforeCall(votesPostRequest, null);
        Type localVarReturnType = new TypeToken<VotesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a vote (asynchronously)
     * Submit a vote using a protobuf signed transaction. The corresponding result are the vote id and transaction hash where the vote is registered.
     * @param votesPostRequest Requires a protobuf signed transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesPostAsync(VotesPostRequest votesPostRequest, final ApiCallback<VotesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = votesPostValidateBeforeCall(votesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<VotesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for votesVerifyElectionIDVoteIDGet
     * @param electionID Election id (required)
     * @param voteID Nullifier of the vote (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (empty body) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesVerifyElectionIDVoteIDGetCall(String electionID, String voteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/votes/verify/{electionID}/{voteID}"
            .replace("{" + "electionID" + "}", localVarApiClient.escapeString(electionID.toString()))
            .replace("{" + "voteID" + "}", localVarApiClient.escapeString(voteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call votesVerifyElectionIDVoteIDGetValidateBeforeCall(String electionID, String voteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'electionID' is set
        if (electionID == null) {
            throw new ApiException("Missing the required parameter 'electionID' when calling votesVerifyElectionIDVoteIDGet(Async)");
        }

        // verify the required parameter 'voteID' is set
        if (voteID == null) {
            throw new ApiException("Missing the required parameter 'voteID' when calling votesVerifyElectionIDVoteIDGet(Async)");
        }

        return votesVerifyElectionIDVoteIDGetCall(electionID, voteID, _callback);

    }

    /**
     * Verify vote
     * Check if vote is registered on the blockchain on specific election. Just return Ok status code
     * @param electionID Election id (required)
     * @param voteID Nullifier of the vote (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (empty body) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void votesVerifyElectionIDVoteIDGet(String electionID, String voteID) throws ApiException {
        votesVerifyElectionIDVoteIDGetWithHttpInfo(electionID, voteID);
    }

    /**
     * Verify vote
     * Check if vote is registered on the blockchain on specific election. Just return Ok status code
     * @param electionID Election id (required)
     * @param voteID Nullifier of the vote (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (empty body) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> votesVerifyElectionIDVoteIDGetWithHttpInfo(String electionID, String voteID) throws ApiException {
        okhttp3.Call localVarCall = votesVerifyElectionIDVoteIDGetValidateBeforeCall(electionID, voteID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verify vote (asynchronously)
     * Check if vote is registered on the blockchain on specific election. Just return Ok status code
     * @param electionID Election id (required)
     * @param voteID Nullifier of the vote (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (empty body) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesVerifyElectionIDVoteIDGetAsync(String electionID, String voteID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = votesVerifyElectionIDVoteIDGetValidateBeforeCall(electionID, voteID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for votesVoteIDGet
     * @param voteID Nullifier of the vote (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesVoteIDGetCall(String voteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/votes/{voteID}"
            .replace("{" + "voteID" + "}", localVarApiClient.escapeString(voteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call votesVoteIDGetValidateBeforeCall(String voteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voteID' is set
        if (voteID == null) {
            throw new ApiException("Missing the required parameter 'voteID' when calling votesVoteIDGet(Async)");
        }

        return votesVoteIDGetCall(voteID, _callback);

    }

    /**
     * Get vote
     * Get the content of an existing Vote. If is an encrypted election it return the &#x60;encryptionKeys&#x60; indexes and the package will be codified.   The Vote is identified by its &#x60;voteId&#x60;, also called &#x60;nullifier&#x60;. The &#x60;nullifier&#x60; is deterministic and its hash could be computed as following (using &#x60;Keccak256&#x60;):  - For signature based elections, is the hash of the &#x60;voterAddress&#x60; + &#x60;processId&#x60; - For anonymous elections, the &#x60;privateKey&#x60; + &#x60;processId&#x60;   As well, on the response, the &#x60;voterId&#x60; won&#39;t be returned for anonymous elections, and the &#x60;encryptionKeyIndexes&#x60; only for finished encrypted elections.   Height and txIndex refer to the block height and the index of the transaction where vote is registered.   The &#x60;overwriteCount&#x60; refers to the number of vote overwrites already executed by the user. At election creation time, you can specify the &#x60;maxVoteOverwrites&#x60; parameter, which defines how many times a voter can submit a vote. Only last vote will be taken into election final results.
     * @param voteID Nullifier of the vote (required)
     * @return ApiVote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiVote votesVoteIDGet(String voteID) throws ApiException {
        ApiResponse<ApiVote> localVarResp = votesVoteIDGetWithHttpInfo(voteID);
        return localVarResp.getData();
    }

    /**
     * Get vote
     * Get the content of an existing Vote. If is an encrypted election it return the &#x60;encryptionKeys&#x60; indexes and the package will be codified.   The Vote is identified by its &#x60;voteId&#x60;, also called &#x60;nullifier&#x60;. The &#x60;nullifier&#x60; is deterministic and its hash could be computed as following (using &#x60;Keccak256&#x60;):  - For signature based elections, is the hash of the &#x60;voterAddress&#x60; + &#x60;processId&#x60; - For anonymous elections, the &#x60;privateKey&#x60; + &#x60;processId&#x60;   As well, on the response, the &#x60;voterId&#x60; won&#39;t be returned for anonymous elections, and the &#x60;encryptionKeyIndexes&#x60; only for finished encrypted elections.   Height and txIndex refer to the block height and the index of the transaction where vote is registered.   The &#x60;overwriteCount&#x60; refers to the number of vote overwrites already executed by the user. At election creation time, you can specify the &#x60;maxVoteOverwrites&#x60; parameter, which defines how many times a voter can submit a vote. Only last vote will be taken into election final results.
     * @param voteID Nullifier of the vote (required)
     * @return ApiResponse&lt;ApiVote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiVote> votesVoteIDGetWithHttpInfo(String voteID) throws ApiException {
        okhttp3.Call localVarCall = votesVoteIDGetValidateBeforeCall(voteID, null);
        Type localVarReturnType = new TypeToken<ApiVote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vote (asynchronously)
     * Get the content of an existing Vote. If is an encrypted election it return the &#x60;encryptionKeys&#x60; indexes and the package will be codified.   The Vote is identified by its &#x60;voteId&#x60;, also called &#x60;nullifier&#x60;. The &#x60;nullifier&#x60; is deterministic and its hash could be computed as following (using &#x60;Keccak256&#x60;):  - For signature based elections, is the hash of the &#x60;voterAddress&#x60; + &#x60;processId&#x60; - For anonymous elections, the &#x60;privateKey&#x60; + &#x60;processId&#x60;   As well, on the response, the &#x60;voterId&#x60; won&#39;t be returned for anonymous elections, and the &#x60;encryptionKeyIndexes&#x60; only for finished encrypted elections.   Height and txIndex refer to the block height and the index of the transaction where vote is registered.   The &#x60;overwriteCount&#x60; refers to the number of vote overwrites already executed by the user. At election creation time, you can specify the &#x60;maxVoteOverwrites&#x60; parameter, which defines how many times a voter can submit a vote. Only last vote will be taken into election final results.
     * @param voteID Nullifier of the vote (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesVoteIDGetAsync(String voteID, final ApiCallback<ApiVote> _callback) throws ApiException {

        okhttp3.Call localVarCall = votesVoteIDGetValidateBeforeCall(voteID, _callback);
        Type localVarReturnType = new TypeToken<ApiVote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
