/*
 * Vocdoni API
 * The Vocdoni API is a REST API that substitutes the previous RPCs in order to make it easier for  developers/integrators to build on top of the voting protocol. This API facilitates creating votings using Vocdoni, without the hassle of learning a complex blockchain platform, allowing to perform all the features that enable the voting protocol such as creating an account, entity, voting process, census & vote, abstracting as much as possible the complexity and offering simple and straightforward methods to perform those actions.   You can review the API endpoints documentation in this section, the main entities are:  - [**Chain**](chain): The Vocdoni blockchain is named Vochain. It is a Byzantine fault-tolerant network based on Tendermint that executes the Vocdoni Protocol logic represented as a state machine. Its main purpose is to register votes in a  decentralized and verifiable format. In those endpoints, you can consult the state of the chain, transactions costs,  list organizations and get more Vochain info. - [**Accounts**](accounts): Identified by an Ethereum like address. An account can create and manage elections, transfer tokens, give power to other accounts on his behalf (delegates) and manage its metadata. - [**Elections**](elections): Is a rule-set of options and requirements for creating a process in which people vote a series of options. To know more about the params of an election and its lifecycle go [here](../get-started/intro#23-elections). In this section you will find all information related to an election as its information, election keys, submitted votes & how to create a new election. - [**Censuses**](censuses): The census is a key component of any voting process. It specifies the set of users (identified by a public key or address) eligible for participating in an election. To understand more about the Censuses you can check [here](../get-started/intro#21-the-census). Here you will be able to get censuses information like the Merkle root, total weight & size, import/export the censuses and create new ones. - [**Votes**](votes): All the information related to the vote issued by a participant in a vote, you can check the validity of the vote, consult your information and send a vote. - [**SIK**](sik): The Secret Identity Key is a user-generated piece of information that proves the user's identity without revealing it. It is the hash of the user's address, the signature of a public message and an optional secret part. It is used to ensure anonymous voting. All registered accounts or anonymous voters must register a SIK, and they are all stored in a Merkle tree. The `/siks` endpoints help to generate a proof of membership, get the current valid SIK roots, or check if an account has a valid SIK.   ### Errors   Backend error messages list are defined here: https://github.com/vocdoni/vocdoni-node/blob/master/api/errors.go  About the **204 no content** error: this message will be returned only if the asset being queried cannot be found but no other errors have occurred. This response is commonly used to prevent Javascript errors that may arise when a client is waiting for a  transaction to be published. During this waiting period, the client can repeatedly query the endpoint until a  successful response with a status code of 200 is received, thereby avoiding any errors that may occur due to the transaction not being published yet.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vocdoni.api;

import io.vocdoni.invoker.ApiCallback;
import io.vocdoni.invoker.ApiClient;
import io.vocdoni.invoker.ApiException;
import io.vocdoni.invoker.ApiResponse;
import io.vocdoni.invoker.Configuration;
import io.vocdoni.invoker.Pair;
import io.vocdoni.invoker.ProgressRequestBody;
import io.vocdoni.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.vocdoni.model.AccountsAccountIDFeesPagePageGet200Response;
import io.vocdoni.model.AccountsAccountIDTransfersPagePageGet200Response;
import io.vocdoni.model.AccountsCountGet200Response;
import io.vocdoni.model.AccountsOrganizationIDElectionsCountGet200Response;
import io.vocdoni.model.AccountsOrganizationIDElectionsPagePageGet200Response;
import io.vocdoni.model.AccountsPagePageGet200Response;
import io.vocdoni.model.AccountsPostRequest;
import io.vocdoni.model.ApiAccount;
import io.vocdoni.model.ApiAccountSet;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsAccountIDFeesPagePageGet
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIDFeesPagePageGetCall(String accountID, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountID}/fees/page/{page}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountIDFeesPagePageGetValidateBeforeCall(String accountID, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling accountsAccountIDFeesPagePageGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling accountsAccountIDFeesPagePageGet(Async)");
        }

        return accountsAccountIDFeesPagePageGetCall(accountID, page, _callback);

    }

    /**
     * List account token fees
     * Returns the token fees for an account. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @return AccountsAccountIDFeesPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsAccountIDFeesPagePageGet200Response accountsAccountIDFeesPagePageGet(String accountID, String page) throws ApiException {
        ApiResponse<AccountsAccountIDFeesPagePageGet200Response> localVarResp = accountsAccountIDFeesPagePageGetWithHttpInfo(accountID, page);
        return localVarResp.getData();
    }

    /**
     * List account token fees
     * Returns the token fees for an account. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @return ApiResponse&lt;AccountsAccountIDFeesPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsAccountIDFeesPagePageGet200Response> accountsAccountIDFeesPagePageGetWithHttpInfo(String accountID, String page) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountIDFeesPagePageGetValidateBeforeCall(accountID, page, null);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List account token fees (asynchronously)
     * Returns the token fees for an account. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIDFeesPagePageGetAsync(String accountID, String page, final ApiCallback<AccountsAccountIDFeesPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountIDFeesPagePageGetValidateBeforeCall(accountID, page, _callback);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsAccountIDTransfersCountGet
     * @param accountID Specific accountID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of transaction sent and received for the account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIDTransfersCountGetCall(String accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountID}/transfers/count"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountIDTransfersCountGetValidateBeforeCall(String accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling accountsAccountIDTransfersCountGet(Async)");
        }

        return accountsAccountIDTransfersCountGetCall(accountID, _callback);

    }

    /**
     * Total number of sent and received transactions
     * Returns the count of total number of sent and received transactions for an account. A transaction is a token transfer from one account to another existing account
     * @param accountID Specific accountID (required)
     * @return AccountsCountGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of transaction sent and received for the account </td><td>  -  </td></tr>
     </table>
     */
    public AccountsCountGet200Response accountsAccountIDTransfersCountGet(String accountID) throws ApiException {
        ApiResponse<AccountsCountGet200Response> localVarResp = accountsAccountIDTransfersCountGetWithHttpInfo(accountID);
        return localVarResp.getData();
    }

    /**
     * Total number of sent and received transactions
     * Returns the count of total number of sent and received transactions for an account. A transaction is a token transfer from one account to another existing account
     * @param accountID Specific accountID (required)
     * @return ApiResponse&lt;AccountsCountGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of transaction sent and received for the account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsCountGet200Response> accountsAccountIDTransfersCountGetWithHttpInfo(String accountID) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountIDTransfersCountGetValidateBeforeCall(accountID, null);
        Type localVarReturnType = new TypeToken<AccountsCountGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Total number of sent and received transactions (asynchronously)
     * Returns the count of total number of sent and received transactions for an account. A transaction is a token transfer from one account to another existing account
     * @param accountID Specific accountID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of transaction sent and received for the account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIDTransfersCountGetAsync(String accountID, final ApiCallback<AccountsCountGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountIDTransfersCountGetValidateBeforeCall(accountID, _callback);
        Type localVarReturnType = new TypeToken<AccountsCountGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsAccountIDTransfersPagePageGet
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIDTransfersPagePageGetCall(String accountID, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountID}/transfers/page/{page}"
            .replace("{" + "accountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountIDTransfersPagePageGetValidateBeforeCall(String accountID, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling accountsAccountIDTransfersPagePageGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling accountsAccountIDTransfersPagePageGet(Async)");
        }

        return accountsAccountIDTransfersPagePageGetCall(accountID, page, _callback);

    }

    /**
     * List account received and sent token transfers
     * Returns the token transfers for an account. A transfer is a token transference from one account to other (excepting the burn address).
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @return AccountsAccountIDTransfersPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsAccountIDTransfersPagePageGet200Response accountsAccountIDTransfersPagePageGet(String accountID, String page) throws ApiException {
        ApiResponse<AccountsAccountIDTransfersPagePageGet200Response> localVarResp = accountsAccountIDTransfersPagePageGetWithHttpInfo(accountID, page);
        return localVarResp.getData();
    }

    /**
     * List account received and sent token transfers
     * Returns the token transfers for an account. A transfer is a token transference from one account to other (excepting the burn address).
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @return ApiResponse&lt;AccountsAccountIDTransfersPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsAccountIDTransfersPagePageGet200Response> accountsAccountIDTransfersPagePageGetWithHttpInfo(String accountID, String page) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountIDTransfersPagePageGetValidateBeforeCall(accountID, page, null);
        Type localVarReturnType = new TypeToken<AccountsAccountIDTransfersPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List account received and sent token transfers (asynchronously)
     * Returns the token transfers for an account. A transfer is a token transference from one account to other (excepting the burn address).
     * @param accountID Specific accountID (required)
     * @param page Paginator page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIDTransfersPagePageGetAsync(String accountID, String page, final ApiCallback<AccountsAccountIDTransfersPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountIDTransfersPagePageGetValidateBeforeCall(accountID, page, _callback);
        Type localVarReturnType = new TypeToken<AccountsAccountIDTransfersPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsAddressGet
     * @param address Account address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAddressGetCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{address}"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAddressGetValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling accountsAddressGet(Async)");
        }

        return accountsAddressGetCall(address, _callback);

    }

    /**
     * Get account
     * Get account information by its address or public key. The &#x60;infoURI&#x60; parameter contain where account metadata is uploaded (like avatar, name...). It return also an already parsed \&quot;metadata\&quot; object from this infoUri. The &#x60;meta&#x60; object inside the &#x60;metadata&#x60; property is left to the user to add random information about the account.
     * @param address Account address (required)
     * @return ApiAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiAccount accountsAddressGet(String address) throws ApiException {
        ApiResponse<ApiAccount> localVarResp = accountsAddressGetWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Get account
     * Get account information by its address or public key. The &#x60;infoURI&#x60; parameter contain where account metadata is uploaded (like avatar, name...). It return also an already parsed \&quot;metadata\&quot; object from this infoUri. The &#x60;meta&#x60; object inside the &#x60;metadata&#x60; property is left to the user to add random information about the account.
     * @param address Account address (required)
     * @return ApiResponse&lt;ApiAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiAccount> accountsAddressGetWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = accountsAddressGetValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<ApiAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account (asynchronously)
     * Get account information by its address or public key. The &#x60;infoURI&#x60; parameter contain where account metadata is uploaded (like avatar, name...). It return also an already parsed \&quot;metadata\&quot; object from this infoUri. The &#x60;meta&#x60; object inside the &#x60;metadata&#x60; property is left to the user to add random information about the account.
     * @param address Account address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAddressGetAsync(String address, final ApiCallback<ApiAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAddressGetValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<ApiAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsCountGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCountGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsCountGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountsCountGetCall(_callback);

    }

    /**
     * Total number of accounts
     * Returns the count of total number of existing accounts
     * @return AccountsCountGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsCountGet200Response accountsCountGet() throws ApiException {
        ApiResponse<AccountsCountGet200Response> localVarResp = accountsCountGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Total number of accounts
     * Returns the count of total number of existing accounts
     * @return ApiResponse&lt;AccountsCountGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsCountGet200Response> accountsCountGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountsCountGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountsCountGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Total number of accounts (asynchronously)
     * Returns the count of total number of existing accounts
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCountGetAsync(final ApiCallback<AccountsCountGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsCountGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountsCountGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsOrganizationIDElectionsCountGet
     * @param organizationID Specific organizationID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsOrganizationIDElectionsCountGetCall(String organizationID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{organizationID}/elections/count"
            .replace("{" + "organizationID" + "}", localVarApiClient.escapeString(organizationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsOrganizationIDElectionsCountGetValidateBeforeCall(String organizationID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationID' is set
        if (organizationID == null) {
            throw new ApiException("Missing the required parameter 'organizationID' when calling accountsOrganizationIDElectionsCountGet(Async)");
        }

        return accountsOrganizationIDElectionsCountGetCall(organizationID, _callback);

    }

    /**
     * Count organization elections
     * Returns the number of elections for an organization
     * @param organizationID Specific organizationID (required)
     * @return AccountsOrganizationIDElectionsCountGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsOrganizationIDElectionsCountGet200Response accountsOrganizationIDElectionsCountGet(String organizationID) throws ApiException {
        ApiResponse<AccountsOrganizationIDElectionsCountGet200Response> localVarResp = accountsOrganizationIDElectionsCountGetWithHttpInfo(organizationID);
        return localVarResp.getData();
    }

    /**
     * Count organization elections
     * Returns the number of elections for an organization
     * @param organizationID Specific organizationID (required)
     * @return ApiResponse&lt;AccountsOrganizationIDElectionsCountGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsOrganizationIDElectionsCountGet200Response> accountsOrganizationIDElectionsCountGetWithHttpInfo(String organizationID) throws ApiException {
        okhttp3.Call localVarCall = accountsOrganizationIDElectionsCountGetValidateBeforeCall(organizationID, null);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsCountGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count organization elections (asynchronously)
     * Returns the number of elections for an organization
     * @param organizationID Specific organizationID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsOrganizationIDElectionsCountGetAsync(String organizationID, final ApiCallback<AccountsOrganizationIDElectionsCountGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsOrganizationIDElectionsCountGetValidateBeforeCall(organizationID, _callback);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsCountGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsOrganizationIDElectionsPagePageGet
     * @param organizationID Specific organizationID (required)
     * @param page Define de page number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsOrganizationIDElectionsPagePageGetCall(String organizationID, BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{organizationID}/elections/page/{page}"
            .replace("{" + "organizationID" + "}", localVarApiClient.escapeString(organizationID.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsOrganizationIDElectionsPagePageGetValidateBeforeCall(String organizationID, BigDecimal page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationID' is set
        if (organizationID == null) {
            throw new ApiException("Missing the required parameter 'organizationID' when calling accountsOrganizationIDElectionsPagePageGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling accountsOrganizationIDElectionsPagePageGet(Async)");
        }

        return accountsOrganizationIDElectionsPagePageGetCall(organizationID, page, _callback);

    }

    /**
     * List organization elections
     * List the elections of an organization
     * @param organizationID Specific organizationID (required)
     * @param page Define de page number (required)
     * @return AccountsOrganizationIDElectionsPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsOrganizationIDElectionsPagePageGet200Response accountsOrganizationIDElectionsPagePageGet(String organizationID, BigDecimal page) throws ApiException {
        ApiResponse<AccountsOrganizationIDElectionsPagePageGet200Response> localVarResp = accountsOrganizationIDElectionsPagePageGetWithHttpInfo(organizationID, page);
        return localVarResp.getData();
    }

    /**
     * List organization elections
     * List the elections of an organization
     * @param organizationID Specific organizationID (required)
     * @param page Define de page number (required)
     * @return ApiResponse&lt;AccountsOrganizationIDElectionsPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsOrganizationIDElectionsPagePageGet200Response> accountsOrganizationIDElectionsPagePageGetWithHttpInfo(String organizationID, BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = accountsOrganizationIDElectionsPagePageGetValidateBeforeCall(organizationID, page, null);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization elections (asynchronously)
     * List the elections of an organization
     * @param organizationID Specific organizationID (required)
     * @param page Define de page number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsOrganizationIDElectionsPagePageGetAsync(String organizationID, BigDecimal page, final ApiCallback<AccountsOrganizationIDElectionsPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsOrganizationIDElectionsPagePageGetValidateBeforeCall(organizationID, page, _callback);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsOrganizationIDElectionsStatusStatusPagePageGet
     * @param organizationID Specific organizationID (required)
     * @param status Status of the election (required)
     * @param page Define de page number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsOrganizationIDElectionsStatusStatusPagePageGetCall(String organizationID, String status, BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{organizationID}/elections/status/{status}/page/{page}"
            .replace("{" + "organizationID" + "}", localVarApiClient.escapeString(organizationID.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsOrganizationIDElectionsStatusStatusPagePageGetValidateBeforeCall(String organizationID, String status, BigDecimal page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationID' is set
        if (organizationID == null) {
            throw new ApiException("Missing the required parameter 'organizationID' when calling accountsOrganizationIDElectionsStatusStatusPagePageGet(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling accountsOrganizationIDElectionsStatusStatusPagePageGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling accountsOrganizationIDElectionsStatusStatusPagePageGet(Async)");
        }

        return accountsOrganizationIDElectionsStatusStatusPagePageGetCall(organizationID, status, page, _callback);

    }

    /**
     * List organization elections by status
     * List the elections of an organization by status
     * @param organizationID Specific organizationID (required)
     * @param status Status of the election (required)
     * @param page Define de page number (required)
     * @return AccountsOrganizationIDElectionsPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsOrganizationIDElectionsPagePageGet200Response accountsOrganizationIDElectionsStatusStatusPagePageGet(String organizationID, String status, BigDecimal page) throws ApiException {
        ApiResponse<AccountsOrganizationIDElectionsPagePageGet200Response> localVarResp = accountsOrganizationIDElectionsStatusStatusPagePageGetWithHttpInfo(organizationID, status, page);
        return localVarResp.getData();
    }

    /**
     * List organization elections by status
     * List the elections of an organization by status
     * @param organizationID Specific organizationID (required)
     * @param status Status of the election (required)
     * @param page Define de page number (required)
     * @return ApiResponse&lt;AccountsOrganizationIDElectionsPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsOrganizationIDElectionsPagePageGet200Response> accountsOrganizationIDElectionsStatusStatusPagePageGetWithHttpInfo(String organizationID, String status, BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = accountsOrganizationIDElectionsStatusStatusPagePageGetValidateBeforeCall(organizationID, status, page, null);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization elections by status (asynchronously)
     * List the elections of an organization by status
     * @param organizationID Specific organizationID (required)
     * @param status Status of the election (required)
     * @param page Define de page number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsOrganizationIDElectionsStatusStatusPagePageGetAsync(String organizationID, String status, BigDecimal page, final ApiCallback<AccountsOrganizationIDElectionsPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsOrganizationIDElectionsStatusStatusPagePageGetValidateBeforeCall(organizationID, status, page, _callback);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPagePageGet
     * @param page Paginator page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPagePageGetCall(String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/page/{page}"
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPagePageGetValidateBeforeCall(String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling accountsPagePageGet(Async)");
        }

        return accountsPagePageGetCall(page, _callback);

    }

    /**
     * List of the existing accounts
     * Returns information (address, balance and nonce) of the existing accounts
     * @param page Paginator page (required)
     * @return AccountsPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsPagePageGet200Response accountsPagePageGet(String page) throws ApiException {
        ApiResponse<AccountsPagePageGet200Response> localVarResp = accountsPagePageGetWithHttpInfo(page);
        return localVarResp.getData();
    }

    /**
     * List of the existing accounts
     * Returns information (address, balance and nonce) of the existing accounts
     * @param page Paginator page (required)
     * @return ApiResponse&lt;AccountsPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsPagePageGet200Response> accountsPagePageGetWithHttpInfo(String page) throws ApiException {
        okhttp3.Call localVarCall = accountsPagePageGetValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<AccountsPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of the existing accounts (asynchronously)
     * Returns information (address, balance and nonce) of the existing accounts
     * @param page Paginator page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPagePageGetAsync(String page, final ApiCallback<AccountsPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPagePageGetValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<AccountsPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPost
     * @param accountsPostRequest Transaction payload and metadata object encoded using base64  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostCall(AccountsPostRequest accountsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsPostRequest;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPostValidateBeforeCall(AccountsPostRequest accountsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountsPostRequest' is set
        if (accountsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsPostRequest' when calling accountsPost(Async)");
        }

        return accountsPostCall(accountsPostRequest, _callback);

    }

    /**
     * Set account
     * It register an account to the blockchain including IPFS metadata upload.   - Requires a signed protobuf transaction on the body to perform the operation. - Metadata is not required, but if no metadata is provided the account won&#39;t be listed on  [/chain/organizations](organizations-list) endpoint. Check there to read about differences between an account and a organization.
     * @param accountsPostRequest Transaction payload and metadata object encoded using base64  (required)
     * @return ApiAccountSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiAccountSet accountsPost(AccountsPostRequest accountsPostRequest) throws ApiException {
        ApiResponse<ApiAccountSet> localVarResp = accountsPostWithHttpInfo(accountsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Set account
     * It register an account to the blockchain including IPFS metadata upload.   - Requires a signed protobuf transaction on the body to perform the operation. - Metadata is not required, but if no metadata is provided the account won&#39;t be listed on  [/chain/organizations](organizations-list) endpoint. Check there to read about differences between an account and a organization.
     * @param accountsPostRequest Transaction payload and metadata object encoded using base64  (required)
     * @return ApiResponse&lt;ApiAccountSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiAccountSet> accountsPostWithHttpInfo(AccountsPostRequest accountsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsPostValidateBeforeCall(accountsPostRequest, null);
        Type localVarReturnType = new TypeToken<ApiAccountSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set account (asynchronously)
     * It register an account to the blockchain including IPFS metadata upload.   - Requires a signed protobuf transaction on the body to perform the operation. - Metadata is not required, but if no metadata is provided the account won&#39;t be listed on  [/chain/organizations](organizations-list) endpoint. Check there to read about differences between an account and a organization.
     * @param accountsPostRequest Transaction payload and metadata object encoded using base64  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostAsync(AccountsPostRequest accountsPostRequest, final ApiCallback<ApiAccountSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPostValidateBeforeCall(accountsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiAccountSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainFeesPagePageGet
     * @param page Paginator page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainFeesPagePageGetCall(String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chain/fees/page/{page}"
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainFeesPagePageGetValidateBeforeCall(String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling chainFeesPagePageGet(Async)");
        }

        return chainFeesPagePageGetCall(page, _callback);

    }

    /**
     * List all token fees
     * Returns the token fees list ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param page Paginator page (required)
     * @return AccountsAccountIDFeesPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsAccountIDFeesPagePageGet200Response chainFeesPagePageGet(String page) throws ApiException {
        ApiResponse<AccountsAccountIDFeesPagePageGet200Response> localVarResp = chainFeesPagePageGetWithHttpInfo(page);
        return localVarResp.getData();
    }

    /**
     * List all token fees
     * Returns the token fees list ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param page Paginator page (required)
     * @return ApiResponse&lt;AccountsAccountIDFeesPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsAccountIDFeesPagePageGet200Response> chainFeesPagePageGetWithHttpInfo(String page) throws ApiException {
        okhttp3.Call localVarCall = chainFeesPagePageGetValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all token fees (asynchronously)
     * Returns the token fees list ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param page Paginator page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainFeesPagePageGetAsync(String page, final ApiCallback<AccountsAccountIDFeesPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainFeesPagePageGetValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainFeesReferenceReferencePagePageGet
     * @param reference Reference filter (required)
     * @param page Paginator page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainFeesReferenceReferencePagePageGetCall(String reference, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chain/fees/reference/{reference}/page/{page}"
            .replace("{" + "reference" + "}", localVarApiClient.escapeString(reference.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainFeesReferenceReferencePagePageGetValidateBeforeCall(String reference, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling chainFeesReferenceReferencePagePageGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling chainFeesReferenceReferencePagePageGet(Async)");
        }

        return chainFeesReferenceReferencePagePageGetCall(reference, page, _callback);

    }

    /**
     * List all token fees by reference
     * Returns the token fees list filtered by reference and ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param reference Reference filter (required)
     * @param page Paginator page (required)
     * @return AccountsAccountIDFeesPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsAccountIDFeesPagePageGet200Response chainFeesReferenceReferencePagePageGet(String reference, String page) throws ApiException {
        ApiResponse<AccountsAccountIDFeesPagePageGet200Response> localVarResp = chainFeesReferenceReferencePagePageGetWithHttpInfo(reference, page);
        return localVarResp.getData();
    }

    /**
     * List all token fees by reference
     * Returns the token fees list filtered by reference and ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param reference Reference filter (required)
     * @param page Paginator page (required)
     * @return ApiResponse&lt;AccountsAccountIDFeesPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsAccountIDFeesPagePageGet200Response> chainFeesReferenceReferencePagePageGetWithHttpInfo(String reference, String page) throws ApiException {
        okhttp3.Call localVarCall = chainFeesReferenceReferencePagePageGetValidateBeforeCall(reference, page, null);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all token fees by reference (asynchronously)
     * Returns the token fees list filtered by reference and ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param reference Reference filter (required)
     * @param page Paginator page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainFeesReferenceReferencePagePageGetAsync(String reference, String page, final ApiCallback<AccountsAccountIDFeesPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainFeesReferenceReferencePagePageGetValidateBeforeCall(reference, page, _callback);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainFeesTypeTypePagePageGet
     * @param type Type filter (required)
     * @param page Paginator page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainFeesTypeTypePagePageGetCall(String type, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chain/fees/type/{type}/page/{page}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainFeesTypeTypePagePageGetValidateBeforeCall(String type, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling chainFeesTypeTypePagePageGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling chainFeesTypeTypePagePageGet(Async)");
        }

        return chainFeesTypeTypePagePageGetCall(type, page, _callback);

    }

    /**
     * List all token fees by type
     * Returns the token fees list filtered by type and ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param type Type filter (required)
     * @param page Paginator page (required)
     * @return AccountsAccountIDFeesPagePageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsAccountIDFeesPagePageGet200Response chainFeesTypeTypePagePageGet(String type, String page) throws ApiException {
        ApiResponse<AccountsAccountIDFeesPagePageGet200Response> localVarResp = chainFeesTypeTypePagePageGetWithHttpInfo(type, page);
        return localVarResp.getData();
    }

    /**
     * List all token fees by type
     * Returns the token fees list filtered by type and ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param type Type filter (required)
     * @param page Paginator page (required)
     * @return ApiResponse&lt;AccountsAccountIDFeesPagePageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsAccountIDFeesPagePageGet200Response> chainFeesTypeTypePagePageGetWithHttpInfo(String type, String page) throws ApiException {
        okhttp3.Call localVarCall = chainFeesTypeTypePagePageGetValidateBeforeCall(type, page, null);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all token fees by type (asynchronously)
     * Returns the token fees list filtered by type and ordered by date. A spending is an amount of tokens burnt from one account for executing transactions.
     * @param type Type filter (required)
     * @param page Paginator page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainFeesTypeTypePagePageGetAsync(String type, String page, final ApiCallback<AccountsAccountIDFeesPagePageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainFeesTypeTypePagePageGetValidateBeforeCall(type, page, _callback);
        Type localVarReturnType = new TypeToken<AccountsAccountIDFeesPagePageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
