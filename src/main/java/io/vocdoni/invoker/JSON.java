/*
 * Vocdoni API
 * The Vocdoni API is a REST API that substitutes the previous RPCs in order to make it easier for  developers/integrators to build on top of the voting protocol. This API facilitates creating votings using Vocdoni, without the hassle of learning a complex blockchain platform, allowing to perform all the features that enable the voting protocol such as creating an account, entity, voting process, census & vote, abstracting as much as possible the complexity and offering simple and straightforward methods to perform those actions.   You can review the API endpoints documentation in this section, the main entities are:  - [**Chain**](chain): The Vocdoni blockchain is named Vochain. It is a Byzantine fault-tolerant network based on Tendermint that executes the Vocdoni Protocol logic represented as a state machine. Its main purpose is to register votes in a  decentralized and verifiable format. In those endpoints, you can consult the state of the chain, transactions costs,  list organizations and get more Vochain info. - [**Accounts**](accounts): Identified by an Ethereum like address. An account can create and manage elections, transfer tokens, give power to other accounts on his behalf (delegates) and manage its metadata. - [**Elections**](elections): Is a rule-set of options and requirements for creating a process in which people vote a series of options. To know more about the params of an election and its lifecycle go [here](../get-started/intro#23-elections). In this section you will find all information related to an election as its information, election keys, submitted votes & how to create a new election. - [**Censuses**](censuses): The census is a key component of any voting process. It specifies the set of users (identified by a public key or address) eligible for participating in an election. To understand more about the Censuses you can check [here](../get-started/intro#21-the-census). Here you will be able to get censuses information like the Merkle root, total weight & size, import/export the censuses and create new ones. - [**Votes**](votes): All the information related to the vote issued by a participant in a vote, you can check the validity of the vote, consult your information and send a vote. - [**SIK**](sik): The Secret Identity Key is a user-generated piece of information that proves the user's identity without revealing it. It is the hash of the user's address, the signature of a public message and an optional secret part. It is used to ensure anonymous voting. All registered accounts or anonymous voters must register a SIK, and they are all stored in a Merkle tree. The `/siks` endpoints help to generate a proof of membership, get the current valid SIK roots, or check if an account has a valid SIK.   ### Errors   Backend error messages list are defined here: https://github.com/vocdoni/vocdoni-node/blob/master/api/errors.go  About the **204 no content** error: this message will be returned only if the asset being queried cannot be found but no other errors have occurred. This response is commonly used to prevent Javascript errors that may arise when a client is waiting for a  transaction to be published. During this waiting period, the client can repeatedly query the endpoint until a  successful response with a status code of 200 is received, thereby avoiding any errors that may occur due to the transaction not being published yet.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vocdoni.invoker;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.AccountsAccountIDFeesPagePageGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.AccountsAccountIDTransfersPagePageGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.AccountsCountGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.AccountsOrganizationIDElectionsCountGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.AccountsOrganizationIDElectionsPagePageGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.AccountsPagePageGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.AccountsPostRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiAccountMedia.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiAccountMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiAccountSet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiBlock.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiCensusParticipant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiCensusParticipants.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiCensusTypeDescription.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiChainInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiChainTxListPaginatedResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiChoiceMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElection.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionCensus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionCreate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionDescription.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionFilter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionKeys.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionMode.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionResults.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionResultsDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiElectionType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiFile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiGenericTransactionWithInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiGenericTransactionWithInfoTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiNextElectionID.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiNextElectionIDEnvelopeType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiOrganizationList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiOrganizationListHandlerResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiProcessMedia.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiQuestion.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiTallyMode.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiTransaction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiTransactionMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiValidator.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiValidatorList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiVote.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiVoteMode.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApiVoteType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ApirestAPIerror.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusdbCensusDump.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesCensusIDProofKeyGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesCensusIDPublishPost200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesCensusIDPublishPost200ResponseCensus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesCensusIDRootGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesCensusIDSizeGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesCensusIDTypeGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesCensusIDWeightGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesExportIpfsGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CensusesTypePost200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ChainBlockToDateHeightGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ChainDateToBlockTimestampGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ChainOrganizationsFilterPagePagePost200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ChainOrganizationsFilterPagePagePostRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ChainTransactionsPostRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.CircuitConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ElectionpriceCalculator.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ElectionpriceElectionParameters.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ElectionpriceFactors.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ElectionsIdPost200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ElectionsPricePost200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.GenesisTransactionCosts.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.GithubComCometbftCometbftTypesBlockID.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.GithubComCometbftCometbftTypesCommit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.GithubComCometbftCometbftTypesCommitSig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.GithubComCometbftCometbftTypesData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.GithubComCometbftCometbftTypesHeader.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.GithubComCometbftCometbftTypesPartSetHeader.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.IndexertypesAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.IndexertypesTokenFeeMeta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.IndexertypesTokenTransferMeta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.IndexertypesTokenTransfersAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.IndexertypesTransaction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsAdminTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsCollectFaucetTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsEnvelopeType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsFaucetPackage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsNewProcessTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsProcess.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsProcessMode.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsProcessResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsProcessVoteOptions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsProof.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsQuestionResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsRegisterKeyTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsSendTokensTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsSetAccountTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsSetKeykeeperTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsSetProcessTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsSetTransactionCostsTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsSignedTx.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxAdmin.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxCollectFaucet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxNewProcess.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxRegisterKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxSendTokens.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxSetAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxSetKeykeeper.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxSetProcess.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxSetTransactionCosts.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsTxVote.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.ModelsVoteEnvelope.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.SiksAddressGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.SiksProofAddressGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.SiksRootsGet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.TypesEvidenceData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.VersionConsensus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.VotesPost200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.VotesPostRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new io.vocdoni.model.WalletAddPrivateKeyPost200Response.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
