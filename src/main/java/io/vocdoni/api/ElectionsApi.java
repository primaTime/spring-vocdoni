/*
 * Vocdoni API
 * The Vocdoni API is a REST API that substitutes the previous RPCs in order to make it easier for  developers/integrators to build on top of the voting protocol. This API facilitates creating votings using Vocdoni, without the hassle of learning a complex blockchain platform, allowing to perform all the features that enable the voting protocol such as creating an account, entity, voting process, census & vote, abstracting as much as possible the complexity and offering simple and straightforward methods to perform those actions.   You can review the API endpoints documentation in this section, the main entities are:  - [**Chain**](chain): The Vocdoni blockchain is named Vochain. It is a Byzantine fault-tolerant network based on Tendermint that executes the Vocdoni Protocol logic represented as a state machine. Its main purpose is to register votes in a  decentralized and verifiable format. In those endpoints, you can consult the state of the chain, transactions costs,  list organizations and get more Vochain info. - [**Accounts**](accounts): Identified by an Ethereum like address. An account can create and manage elections, transfer tokens, give power to other accounts on his behalf (delegates) and manage its metadata. - [**Elections**](elections): Is a rule-set of options and requirements for creating a process in which people vote a series of options. To know more about the params of an election and its lifecycle go [here](../get-started/intro#23-elections). In this section you will find all information related to an election as its information, election keys, submitted votes & how to create a new election. - [**Censuses**](censuses): The census is a key component of any voting process. It specifies the set of users (identified by a public key or address) eligible for participating in an election. To understand more about the Censuses you can check [here](../get-started/intro#21-the-census). Here you will be able to get censuses information like the Merkle root, total weight & size, import/export the censuses and create new ones. - [**Votes**](votes): All the information related to the vote issued by a participant in a vote, you can check the validity of the vote, consult your information and send a vote. - [**SIK**](sik): The Secret Identity Key is a user-generated piece of information that proves the user's identity without revealing it. It is the hash of the user's address, the signature of a public message and an optional secret part. It is used to ensure anonymous voting. All registered accounts or anonymous voters must register a SIK, and they are all stored in a Merkle tree. The `/siks` endpoints help to generate a proof of membership, get the current valid SIK roots, or check if an account has a valid SIK.   ### Errors   Backend error messages list are defined here: https://github.com/vocdoni/vocdoni-node/blob/master/api/errors.go  About the **204 no content** error: this message will be returned only if the asset being queried cannot be found but no other errors have occurred. This response is commonly used to prevent Javascript errors that may arise when a client is waiting for a  transaction to be published. During this waiting period, the client can repeatedly query the endpoint until a  successful response with a status code of 200 is received, thereby avoiding any errors that may occur due to the transaction not being published yet.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vocdoni.api;

import io.vocdoni.invoker.ApiCallback;
import io.vocdoni.invoker.ApiClient;
import io.vocdoni.invoker.ApiException;
import io.vocdoni.invoker.ApiResponse;
import io.vocdoni.invoker.Configuration;
import io.vocdoni.invoker.Pair;
import io.vocdoni.invoker.ProgressRequestBody;
import io.vocdoni.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.vocdoni.model.AccountsOrganizationIDElectionsCountGet200Response;
import io.vocdoni.model.ApiElection;
import io.vocdoni.model.ApiElectionCreate;
import io.vocdoni.model.ApiElectionFilter;
import io.vocdoni.model.ApiElectionKeys;
import io.vocdoni.model.ApiElectionResults;
import io.vocdoni.model.ApiElectionSummary;
import io.vocdoni.model.ApiFile;
import io.vocdoni.model.ApiNextElectionID;
import io.vocdoni.model.ApiVote;
import java.math.BigDecimal;
import io.vocdoni.model.ChainTransactionsPostRequest;
import io.vocdoni.model.ElectionpriceElectionParameters;
import io.vocdoni.model.ElectionsIdPost200Response;
import io.vocdoni.model.ElectionsPricePost200Response;
import io.vocdoni.model.ModelsSignedTx;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ElectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ElectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ElectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for electionsElectionIDGet
     * @param electionID Election id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDGetCall(String electionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/{electionID}"
            .replace("{" + "electionID" + "}", localVarApiClient.escapeString(electionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsElectionIDGetValidateBeforeCall(String electionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'electionID' is set
        if (electionID == null) {
            throw new ApiException("Missing the required parameter 'electionID' when calling electionsElectionIDGet(Async)");
        }

        return electionsElectionIDGetCall(electionID, _callback);

    }

    /**
     * Election information
     * Get full election information
     * @param electionID Election id (required)
     * @return ApiElection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiElection electionsElectionIDGet(String electionID) throws ApiException {
        ApiResponse<ApiElection> localVarResp = electionsElectionIDGetWithHttpInfo(electionID);
        return localVarResp.getData();
    }

    /**
     * Election information
     * Get full election information
     * @param electionID Election id (required)
     * @return ApiResponse&lt;ApiElection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiElection> electionsElectionIDGetWithHttpInfo(String electionID) throws ApiException {
        okhttp3.Call localVarCall = electionsElectionIDGetValidateBeforeCall(electionID, null);
        Type localVarReturnType = new TypeToken<ApiElection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Election information (asynchronously)
     * Get full election information
     * @param electionID Election id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDGetAsync(String electionID, final ApiCallback<ApiElection> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsElectionIDGetValidateBeforeCall(electionID, _callback);
        Type localVarReturnType = new TypeToken<ApiElection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsElectionIDKeysGet
     * @param electionID Election id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDKeysGetCall(String electionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/{electionID}/keys"
            .replace("{" + "electionID" + "}", localVarApiClient.escapeString(electionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsElectionIDKeysGetValidateBeforeCall(String electionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'electionID' is set
        if (electionID == null) {
            throw new ApiException("Missing the required parameter 'electionID' when calling electionsElectionIDKeysGet(Async)");
        }

        return electionsElectionIDKeysGetCall(electionID, _callback);

    }

    /**
     * List encryption keys
     * Returns the list of public/private encryption keys
     * @param electionID Election id (required)
     * @return ApiElectionKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiElectionKeys electionsElectionIDKeysGet(String electionID) throws ApiException {
        ApiResponse<ApiElectionKeys> localVarResp = electionsElectionIDKeysGetWithHttpInfo(electionID);
        return localVarResp.getData();
    }

    /**
     * List encryption keys
     * Returns the list of public/private encryption keys
     * @param electionID Election id (required)
     * @return ApiResponse&lt;ApiElectionKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiElectionKeys> electionsElectionIDKeysGetWithHttpInfo(String electionID) throws ApiException {
        okhttp3.Call localVarCall = electionsElectionIDKeysGetValidateBeforeCall(electionID, null);
        Type localVarReturnType = new TypeToken<ApiElectionKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List encryption keys (asynchronously)
     * Returns the list of public/private encryption keys
     * @param electionID Election id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDKeysGetAsync(String electionID, final ApiCallback<ApiElectionKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsElectionIDKeysGetValidateBeforeCall(electionID, _callback);
        Type localVarReturnType = new TypeToken<ApiElectionKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsElectionIDScrutinyGet
     * @param electionID Election id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDScrutinyGetCall(String electionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/{electionID}/scrutiny"
            .replace("{" + "electionID" + "}", localVarApiClient.escapeString(electionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsElectionIDScrutinyGetValidateBeforeCall(String electionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'electionID' is set
        if (electionID == null) {
            throw new ApiException("Missing the required parameter 'electionID' when calling electionsElectionIDScrutinyGet(Async)");
        }

        return electionsElectionIDScrutinyGetCall(electionID, _callback);

    }

    /**
     * Election results
     * Returns a given election consensus results and useful information about the results. Results represented with BigInt strings.   This method can be used by anyone, but it is also used by Chainlink for fetching Vochain results and store it to the Results contract on an EVM network.   For discovering more about the on-chain results, please refer to [chainlink-tally](https://github.com/vocdoni/chainlink-tally#chainlink-tally) repository.
     * @param electionID Election id (required)
     * @return ApiElectionResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiElectionResults electionsElectionIDScrutinyGet(String electionID) throws ApiException {
        ApiResponse<ApiElectionResults> localVarResp = electionsElectionIDScrutinyGetWithHttpInfo(electionID);
        return localVarResp.getData();
    }

    /**
     * Election results
     * Returns a given election consensus results and useful information about the results. Results represented with BigInt strings.   This method can be used by anyone, but it is also used by Chainlink for fetching Vochain results and store it to the Results contract on an EVM network.   For discovering more about the on-chain results, please refer to [chainlink-tally](https://github.com/vocdoni/chainlink-tally#chainlink-tally) repository.
     * @param electionID Election id (required)
     * @return ApiResponse&lt;ApiElectionResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiElectionResults> electionsElectionIDScrutinyGetWithHttpInfo(String electionID) throws ApiException {
        okhttp3.Call localVarCall = electionsElectionIDScrutinyGetValidateBeforeCall(electionID, null);
        Type localVarReturnType = new TypeToken<ApiElectionResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Election results (asynchronously)
     * Returns a given election consensus results and useful information about the results. Results represented with BigInt strings.   This method can be used by anyone, but it is also used by Chainlink for fetching Vochain results and store it to the Results contract on an EVM network.   For discovering more about the on-chain results, please refer to [chainlink-tally](https://github.com/vocdoni/chainlink-tally#chainlink-tally) repository.
     * @param electionID Election id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDScrutinyGetAsync(String electionID, final ApiCallback<ApiElectionResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsElectionIDScrutinyGetValidateBeforeCall(electionID, _callback);
        Type localVarReturnType = new TypeToken<ApiElectionResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsElectionIDVotesCountGet
     * @param electionID Election id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDVotesCountGetCall(String electionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/{electionID}/votes/count"
            .replace("{" + "electionID" + "}", localVarApiClient.escapeString(electionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsElectionIDVotesCountGetValidateBeforeCall(String electionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'electionID' is set
        if (electionID == null) {
            throw new ApiException("Missing the required parameter 'electionID' when calling electionsElectionIDVotesCountGet(Async)");
        }

        return electionsElectionIDVotesCountGetCall(electionID, _callback);

    }

    /**
     * Count election votes
     * Get the number of votes for an election
     * @param electionID Election id (required)
     * @return AccountsOrganizationIDElectionsCountGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsOrganizationIDElectionsCountGet200Response electionsElectionIDVotesCountGet(String electionID) throws ApiException {
        ApiResponse<AccountsOrganizationIDElectionsCountGet200Response> localVarResp = electionsElectionIDVotesCountGetWithHttpInfo(electionID);
        return localVarResp.getData();
    }

    /**
     * Count election votes
     * Get the number of votes for an election
     * @param electionID Election id (required)
     * @return ApiResponse&lt;AccountsOrganizationIDElectionsCountGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsOrganizationIDElectionsCountGet200Response> electionsElectionIDVotesCountGetWithHttpInfo(String electionID) throws ApiException {
        okhttp3.Call localVarCall = electionsElectionIDVotesCountGetValidateBeforeCall(electionID, null);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsCountGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count election votes (asynchronously)
     * Get the number of votes for an election
     * @param electionID Election id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDVotesCountGetAsync(String electionID, final ApiCallback<AccountsOrganizationIDElectionsCountGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsElectionIDVotesCountGetValidateBeforeCall(electionID, _callback);
        Type localVarReturnType = new TypeToken<AccountsOrganizationIDElectionsCountGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsElectionIDVotesPagePageGet
     * @param electionID Election id (required)
     * @param page Page  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDVotesPagePageGetCall(String electionID, BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/{electionID}/votes/page/{page}"
            .replace("{" + "electionID" + "}", localVarApiClient.escapeString(electionID.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsElectionIDVotesPagePageGetValidateBeforeCall(String electionID, BigDecimal page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'electionID' is set
        if (electionID == null) {
            throw new ApiException("Missing the required parameter 'electionID' when calling electionsElectionIDVotesPagePageGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling electionsElectionIDVotesPagePageGet(Async)");
        }

        return electionsElectionIDVotesPagePageGetCall(electionID, page, _callback);

    }

    /**
     * List election votes
     * Returns the list of voteIDs for an election (paginated)
     * @param electionID Election id (required)
     * @param page Page  (required)
     * @return ApiVote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiVote electionsElectionIDVotesPagePageGet(String electionID, BigDecimal page) throws ApiException {
        ApiResponse<ApiVote> localVarResp = electionsElectionIDVotesPagePageGetWithHttpInfo(electionID, page);
        return localVarResp.getData();
    }

    /**
     * List election votes
     * Returns the list of voteIDs for an election (paginated)
     * @param electionID Election id (required)
     * @param page Page  (required)
     * @return ApiResponse&lt;ApiVote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiVote> electionsElectionIDVotesPagePageGetWithHttpInfo(String electionID, BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = electionsElectionIDVotesPagePageGetValidateBeforeCall(electionID, page, null);
        Type localVarReturnType = new TypeToken<ApiVote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List election votes (asynchronously)
     * Returns the list of voteIDs for an election (paginated)
     * @param electionID Election id (required)
     * @param page Page  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsElectionIDVotesPagePageGetAsync(String electionID, BigDecimal page, final ApiCallback<ApiVote> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsElectionIDVotesPagePageGetValidateBeforeCall(electionID, page, _callback);
        Type localVarReturnType = new TypeToken<ApiVote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsFilterPagePagePost
     * @param page Page to paginate (required)
     * @param apiElectionFilter Filtered by partial organizationID, partial processID, process status and with results available or not (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsFilterPagePagePostCall(BigDecimal page, ApiElectionFilter apiElectionFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiElectionFilter;

        // create path and map variables
        String localVarPath = "/elections/filter/page/{page}"
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsFilterPagePagePostValidateBeforeCall(BigDecimal page, ApiElectionFilter apiElectionFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling electionsFilterPagePagePost(Async)");
        }

        // verify the required parameter 'apiElectionFilter' is set
        if (apiElectionFilter == null) {
            throw new ApiException("Missing the required parameter 'apiElectionFilter' when calling electionsFilterPagePagePost(Async)");
        }

        return electionsFilterPagePagePostCall(page, apiElectionFilter, _callback);

    }

    /**
     * List elections (filtered)
     * Return a filtered elections list, the available filters have to be sent on the request body. Available are:           &#x60;&#x60;&#x60;json {     \&quot;organizationId\&quot;: \&quot;hexString\&quot;,     \&quot;electionId\&quot;: \&quot;hexString\&quot;,     \&quot;withResults\&quot;: false,     \&quot;status\&quot;: \&quot;READY\&quot;, } &#x60;&#x60;&#x60;  &#x60;electionId&#x60; can be partial.   See [elections list](elections-list)
     * @param page Page to paginate (required)
     * @param apiElectionFilter Filtered by partial organizationID, partial processID, process status and with results available or not (required)
     * @return ApiElectionSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiElectionSummary electionsFilterPagePagePost(BigDecimal page, ApiElectionFilter apiElectionFilter) throws ApiException {
        ApiResponse<ApiElectionSummary> localVarResp = electionsFilterPagePagePostWithHttpInfo(page, apiElectionFilter);
        return localVarResp.getData();
    }

    /**
     * List elections (filtered)
     * Return a filtered elections list, the available filters have to be sent on the request body. Available are:           &#x60;&#x60;&#x60;json {     \&quot;organizationId\&quot;: \&quot;hexString\&quot;,     \&quot;electionId\&quot;: \&quot;hexString\&quot;,     \&quot;withResults\&quot;: false,     \&quot;status\&quot;: \&quot;READY\&quot;, } &#x60;&#x60;&#x60;  &#x60;electionId&#x60; can be partial.   See [elections list](elections-list)
     * @param page Page to paginate (required)
     * @param apiElectionFilter Filtered by partial organizationID, partial processID, process status and with results available or not (required)
     * @return ApiResponse&lt;ApiElectionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiElectionSummary> electionsFilterPagePagePostWithHttpInfo(BigDecimal page, ApiElectionFilter apiElectionFilter) throws ApiException {
        okhttp3.Call localVarCall = electionsFilterPagePagePostValidateBeforeCall(page, apiElectionFilter, null);
        Type localVarReturnType = new TypeToken<ApiElectionSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List elections (filtered) (asynchronously)
     * Return a filtered elections list, the available filters have to be sent on the request body. Available are:           &#x60;&#x60;&#x60;json {     \&quot;organizationId\&quot;: \&quot;hexString\&quot;,     \&quot;electionId\&quot;: \&quot;hexString\&quot;,     \&quot;withResults\&quot;: false,     \&quot;status\&quot;: \&quot;READY\&quot;, } &#x60;&#x60;&#x60;  &#x60;electionId&#x60; can be partial.   See [elections list](elections-list)
     * @param page Page to paginate (required)
     * @param apiElectionFilter Filtered by partial organizationID, partial processID, process status and with results available or not (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsFilterPagePagePostAsync(BigDecimal page, ApiElectionFilter apiElectionFilter, final ApiCallback<ApiElectionSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsFilterPagePagePostValidateBeforeCall(page, apiElectionFilter, _callback);
        Type localVarReturnType = new TypeToken<ApiElectionSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsIdPost
     * @param apiNextElectionID OrganizationID, CensusOrigin and EnvelopeType (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsIdPostCall(ApiNextElectionID apiNextElectionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiNextElectionID;

        // create path and map variables
        String localVarPath = "/elections/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsIdPostValidateBeforeCall(ApiNextElectionID apiNextElectionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiNextElectionID' is set
        if (apiNextElectionID == null) {
            throw new ApiException("Missing the required parameter 'apiNextElectionID' when calling electionsIdPost(Async)");
        }

        return electionsIdPostCall(apiNextElectionID, _callback);

    }

    /**
     * Get next election ID
     * nextElectionIDHandler
     * @param apiNextElectionID OrganizationID, CensusOrigin and EnvelopeType (required)
     * @return ElectionsIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ElectionsIdPost200Response electionsIdPost(ApiNextElectionID apiNextElectionID) throws ApiException {
        ApiResponse<ElectionsIdPost200Response> localVarResp = electionsIdPostWithHttpInfo(apiNextElectionID);
        return localVarResp.getData();
    }

    /**
     * Get next election ID
     * nextElectionIDHandler
     * @param apiNextElectionID OrganizationID, CensusOrigin and EnvelopeType (required)
     * @return ApiResponse&lt;ElectionsIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectionsIdPost200Response> electionsIdPostWithHttpInfo(ApiNextElectionID apiNextElectionID) throws ApiException {
        okhttp3.Call localVarCall = electionsIdPostValidateBeforeCall(apiNextElectionID, null);
        Type localVarReturnType = new TypeToken<ElectionsIdPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get next election ID (asynchronously)
     * nextElectionIDHandler
     * @param apiNextElectionID OrganizationID, CensusOrigin and EnvelopeType (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsIdPostAsync(ApiNextElectionID apiNextElectionID, final ApiCallback<ElectionsIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsIdPostValidateBeforeCall(apiNextElectionID, _callback);
        Type localVarReturnType = new TypeToken<ElectionsIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsPagePageGet
     * @param page Page  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsPagePageGetCall(BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elections/page/{page}"
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsPagePageGetValidateBeforeCall(BigDecimal page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling electionsPagePageGet(Async)");
        }

        return electionsPagePageGetCall(page, _callback);

    }

    /**
     * List elections
     * Get a list of elections summaries.
     * @param page Page  (required)
     * @return ApiElectionSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiElectionSummary electionsPagePageGet(BigDecimal page) throws ApiException {
        ApiResponse<ApiElectionSummary> localVarResp = electionsPagePageGetWithHttpInfo(page);
        return localVarResp.getData();
    }

    /**
     * List elections
     * Get a list of elections summaries.
     * @param page Page  (required)
     * @return ApiResponse&lt;ApiElectionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiElectionSummary> electionsPagePageGetWithHttpInfo(BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = electionsPagePageGetValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<ApiElectionSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List elections (asynchronously)
     * Get a list of elections summaries.
     * @param page Page  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsPagePageGetAsync(BigDecimal page, final ApiCallback<ApiElectionSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsPagePageGetValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<ApiElectionSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsPost
     * @param modelsSignedTx Uses &#x60;txPayload&#x60; protobuf signed transaction, and the &#x60;metadata&#x60; base64-encoded JSON object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It return txId, electionId and the metadataURL for the newly created election. If metadataURL is returned empty, means that there is some issue with the storage provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsPostCall(ModelsSignedTx modelsSignedTx, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsSignedTx;

        // create path and map variables
        String localVarPath = "/elections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsPostValidateBeforeCall(ModelsSignedTx modelsSignedTx, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelsSignedTx' is set
        if (modelsSignedTx == null) {
            throw new ApiException("Missing the required parameter 'modelsSignedTx' when calling electionsPost(Async)");
        }

        return electionsPostCall(modelsSignedTx, _callback);

    }

    /**
     * Create election
     * It creates an election on the Vochain.   To use this endpoint, you will need to provide a signed transaction that has been encoded on the client side using the **Vocdoni SDK**. This transaction, referred to as txPayload, must include the IPFS CID-formatted hash of the metadata for the election.  The metadata for the election is optional and is provided as a base64-encoded JSON object. This object should follow the Entity metadata specification and includes information about the election, such as the list of candidates and the election&#39;s description. This metadata is stored within IPFS so that participants can access it.  The API endpoint will verify that the hash in the txPayload transaction matches the uploaded metadata. If these do not match, the API will return an error.  Example of election metadata object:  &#x60;&#x60;&#x60;json {     \&quot;version\&quot;: \&quot;1.0\&quot;,     \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Best pasta!\&quot;, \&quot;en\&quot;: \&quot;Best pasta!\&quot;, \&quot;es\&quot;: \&quot;La mejor pasta!\&quot;},     \&quot;description\&quot;: {\&quot;default\&quot;: \&quot;Decide what is the best pasta\&quot;, \&quot;en\&quot;: \&quot;Decide what is the best pasta\&quot;, \&quot;es\&quot;: \&quot;Decide cual es la mejor pasta\&quot;},     // Following fields are optional     \&quot;media\&quot;: {     \&quot;header\&quot;: \&quot;url to an image\&quot;     \&quot;streamUri\&quot;: \&quot;url to a stream resource\&quot;     },     \&quot;questions\&quot;: [     {         \&quot;choices\&quot;: [          {              \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Macarroni\&quot;, \&quot;en\&quot;: \&quot;Macarroni\&quot;, \&quot;es\&quot;: \&quot;Macarrones\&quot;},             \&quot;value\&quot;: 0         }          {              \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Spaghetti\&quot;, \&quot;en\&quot;: \&quot;Spaghetti\&quot;, \&quot;es\&quot;: \&quot;Espaguetis\&quot;},             \&quot;value\&quot;: 1         }          ],          \&quot;description\&quot;: {\&quot;default\&quot;: \&quot;Choice one of theme\&quot;, \&quot;en\&quot;: \&quot;Choice one of theme\&quot;, \&quot;es\&quot;: \&quot;Elije una de ellas\&quot;},         \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Macarroni or Spaghetti\&quot;, \&quot;en\&quot;: \&quot;Macarroni or Spaghetti\&quot;, \&quot;es\&quot;: \&quot;Macarrones o Espaguetis\&quot;}     }     ] } &#x60;&#x60;&#x60;  [Read more about process creation](https://docs.vocdoni.io/architecture/process-overview.html#process-creation)
     * @param modelsSignedTx Uses &#x60;txPayload&#x60; protobuf signed transaction, and the &#x60;metadata&#x60; base64-encoded JSON object (required)
     * @return ApiElectionCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It return txId, electionId and the metadataURL for the newly created election. If metadataURL is returned empty, means that there is some issue with the storage provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiElectionCreate electionsPost(ModelsSignedTx modelsSignedTx) throws ApiException {
        ApiResponse<ApiElectionCreate> localVarResp = electionsPostWithHttpInfo(modelsSignedTx);
        return localVarResp.getData();
    }

    /**
     * Create election
     * It creates an election on the Vochain.   To use this endpoint, you will need to provide a signed transaction that has been encoded on the client side using the **Vocdoni SDK**. This transaction, referred to as txPayload, must include the IPFS CID-formatted hash of the metadata for the election.  The metadata for the election is optional and is provided as a base64-encoded JSON object. This object should follow the Entity metadata specification and includes information about the election, such as the list of candidates and the election&#39;s description. This metadata is stored within IPFS so that participants can access it.  The API endpoint will verify that the hash in the txPayload transaction matches the uploaded metadata. If these do not match, the API will return an error.  Example of election metadata object:  &#x60;&#x60;&#x60;json {     \&quot;version\&quot;: \&quot;1.0\&quot;,     \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Best pasta!\&quot;, \&quot;en\&quot;: \&quot;Best pasta!\&quot;, \&quot;es\&quot;: \&quot;La mejor pasta!\&quot;},     \&quot;description\&quot;: {\&quot;default\&quot;: \&quot;Decide what is the best pasta\&quot;, \&quot;en\&quot;: \&quot;Decide what is the best pasta\&quot;, \&quot;es\&quot;: \&quot;Decide cual es la mejor pasta\&quot;},     // Following fields are optional     \&quot;media\&quot;: {     \&quot;header\&quot;: \&quot;url to an image\&quot;     \&quot;streamUri\&quot;: \&quot;url to a stream resource\&quot;     },     \&quot;questions\&quot;: [     {         \&quot;choices\&quot;: [          {              \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Macarroni\&quot;, \&quot;en\&quot;: \&quot;Macarroni\&quot;, \&quot;es\&quot;: \&quot;Macarrones\&quot;},             \&quot;value\&quot;: 0         }          {              \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Spaghetti\&quot;, \&quot;en\&quot;: \&quot;Spaghetti\&quot;, \&quot;es\&quot;: \&quot;Espaguetis\&quot;},             \&quot;value\&quot;: 1         }          ],          \&quot;description\&quot;: {\&quot;default\&quot;: \&quot;Choice one of theme\&quot;, \&quot;en\&quot;: \&quot;Choice one of theme\&quot;, \&quot;es\&quot;: \&quot;Elije una de ellas\&quot;},         \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Macarroni or Spaghetti\&quot;, \&quot;en\&quot;: \&quot;Macarroni or Spaghetti\&quot;, \&quot;es\&quot;: \&quot;Macarrones o Espaguetis\&quot;}     }     ] } &#x60;&#x60;&#x60;  [Read more about process creation](https://docs.vocdoni.io/architecture/process-overview.html#process-creation)
     * @param modelsSignedTx Uses &#x60;txPayload&#x60; protobuf signed transaction, and the &#x60;metadata&#x60; base64-encoded JSON object (required)
     * @return ApiResponse&lt;ApiElectionCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It return txId, electionId and the metadataURL for the newly created election. If metadataURL is returned empty, means that there is some issue with the storage provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiElectionCreate> electionsPostWithHttpInfo(ModelsSignedTx modelsSignedTx) throws ApiException {
        okhttp3.Call localVarCall = electionsPostValidateBeforeCall(modelsSignedTx, null);
        Type localVarReturnType = new TypeToken<ApiElectionCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create election (asynchronously)
     * It creates an election on the Vochain.   To use this endpoint, you will need to provide a signed transaction that has been encoded on the client side using the **Vocdoni SDK**. This transaction, referred to as txPayload, must include the IPFS CID-formatted hash of the metadata for the election.  The metadata for the election is optional and is provided as a base64-encoded JSON object. This object should follow the Entity metadata specification and includes information about the election, such as the list of candidates and the election&#39;s description. This metadata is stored within IPFS so that participants can access it.  The API endpoint will verify that the hash in the txPayload transaction matches the uploaded metadata. If these do not match, the API will return an error.  Example of election metadata object:  &#x60;&#x60;&#x60;json {     \&quot;version\&quot;: \&quot;1.0\&quot;,     \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Best pasta!\&quot;, \&quot;en\&quot;: \&quot;Best pasta!\&quot;, \&quot;es\&quot;: \&quot;La mejor pasta!\&quot;},     \&quot;description\&quot;: {\&quot;default\&quot;: \&quot;Decide what is the best pasta\&quot;, \&quot;en\&quot;: \&quot;Decide what is the best pasta\&quot;, \&quot;es\&quot;: \&quot;Decide cual es la mejor pasta\&quot;},     // Following fields are optional     \&quot;media\&quot;: {     \&quot;header\&quot;: \&quot;url to an image\&quot;     \&quot;streamUri\&quot;: \&quot;url to a stream resource\&quot;     },     \&quot;questions\&quot;: [     {         \&quot;choices\&quot;: [          {              \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Macarroni\&quot;, \&quot;en\&quot;: \&quot;Macarroni\&quot;, \&quot;es\&quot;: \&quot;Macarrones\&quot;},             \&quot;value\&quot;: 0         }          {              \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Spaghetti\&quot;, \&quot;en\&quot;: \&quot;Spaghetti\&quot;, \&quot;es\&quot;: \&quot;Espaguetis\&quot;},             \&quot;value\&quot;: 1         }          ],          \&quot;description\&quot;: {\&quot;default\&quot;: \&quot;Choice one of theme\&quot;, \&quot;en\&quot;: \&quot;Choice one of theme\&quot;, \&quot;es\&quot;: \&quot;Elije una de ellas\&quot;},         \&quot;title\&quot;: {\&quot;default\&quot;: \&quot;Macarroni or Spaghetti\&quot;, \&quot;en\&quot;: \&quot;Macarroni or Spaghetti\&quot;, \&quot;es\&quot;: \&quot;Macarrones o Espaguetis\&quot;}     }     ] } &#x60;&#x60;&#x60;  [Read more about process creation](https://docs.vocdoni.io/architecture/process-overview.html#process-creation)
     * @param modelsSignedTx Uses &#x60;txPayload&#x60; protobuf signed transaction, and the &#x60;metadata&#x60; base64-encoded JSON object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It return txId, electionId and the metadataURL for the newly created election. If metadataURL is returned empty, means that there is some issue with the storage provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsPostAsync(ModelsSignedTx modelsSignedTx, final ApiCallback<ApiElectionCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsPostValidateBeforeCall(modelsSignedTx, _callback);
        Type localVarReturnType = new TypeToken<ApiElectionCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for electionsPricePost
     * @param electionpriceElectionParameters 5 election parameters that are required for calculating the price (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsPricePostCall(ElectionpriceElectionParameters electionpriceElectionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = electionpriceElectionParameters;

        // create path and map variables
        String localVarPath = "/elections/price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call electionsPricePostValidateBeforeCall(ElectionpriceElectionParameters electionpriceElectionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'electionpriceElectionParameters' is set
        if (electionpriceElectionParameters == null) {
            throw new ApiException("Missing the required parameter 'electionpriceElectionParameters' when calling electionsPricePost(Async)");
        }

        return electionsPricePostCall(electionpriceElectionParameters, _callback);

    }

    /**
     * Compute election price
     * Helper endpoint to get the election price.
     * @param electionpriceElectionParameters 5 election parameters that are required for calculating the price (required)
     * @return ElectionsPricePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ElectionsPricePost200Response electionsPricePost(ElectionpriceElectionParameters electionpriceElectionParameters) throws ApiException {
        ApiResponse<ElectionsPricePost200Response> localVarResp = electionsPricePostWithHttpInfo(electionpriceElectionParameters);
        return localVarResp.getData();
    }

    /**
     * Compute election price
     * Helper endpoint to get the election price.
     * @param electionpriceElectionParameters 5 election parameters that are required for calculating the price (required)
     * @return ApiResponse&lt;ElectionsPricePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectionsPricePost200Response> electionsPricePostWithHttpInfo(ElectionpriceElectionParameters electionpriceElectionParameters) throws ApiException {
        okhttp3.Call localVarCall = electionsPricePostValidateBeforeCall(electionpriceElectionParameters, null);
        Type localVarReturnType = new TypeToken<ElectionsPricePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute election price (asynchronously)
     * Helper endpoint to get the election price.
     * @param electionpriceElectionParameters 5 election parameters that are required for calculating the price (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call electionsPricePostAsync(ElectionpriceElectionParameters electionpriceElectionParameters, final ApiCallback<ElectionsPricePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = electionsPricePostValidateBeforeCall(electionpriceElectionParameters, _callback);
        Type localVarReturnType = new TypeToken<ElectionsPricePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesCidPost
     * @param chainTransactionsPostRequest File bytes base64 encoded (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesCidPostCall(ChainTransactionsPostRequest chainTransactionsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chainTransactionsPostRequest;

        // create path and map variables
        String localVarPath = "/files/cid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesCidPostValidateBeforeCall(ChainTransactionsPostRequest chainTransactionsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chainTransactionsPostRequest' is set
        if (chainTransactionsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'chainTransactionsPostRequest' when calling filesCidPost(Async)");
        }

        return filesCidPostCall(chainTransactionsPostRequest, _callback);

    }

    /**
     * Compute IPFS CIDv1 of file
     * Helper endpoint to get the IPFS CIDv1 hash of a file
     * @param chainTransactionsPostRequest File bytes base64 encoded (required)
     * @return ApiFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiFile filesCidPost(ChainTransactionsPostRequest chainTransactionsPostRequest) throws ApiException {
        ApiResponse<ApiFile> localVarResp = filesCidPostWithHttpInfo(chainTransactionsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Compute IPFS CIDv1 of file
     * Helper endpoint to get the IPFS CIDv1 hash of a file
     * @param chainTransactionsPostRequest File bytes base64 encoded (required)
     * @return ApiResponse&lt;ApiFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiFile> filesCidPostWithHttpInfo(ChainTransactionsPostRequest chainTransactionsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = filesCidPostValidateBeforeCall(chainTransactionsPostRequest, null);
        Type localVarReturnType = new TypeToken<ApiFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute IPFS CIDv1 of file (asynchronously)
     * Helper endpoint to get the IPFS CIDv1 hash of a file
     * @param chainTransactionsPostRequest File bytes base64 encoded (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesCidPostAsync(ChainTransactionsPostRequest chainTransactionsPostRequest, final ApiCallback<ApiFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesCidPostValidateBeforeCall(chainTransactionsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
